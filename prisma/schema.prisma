// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Better Auth Models
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  emailVerified Boolean   @default(false)
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  // projects      Project[] // Will be added after migration
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  accountId         String
  providerId        String
  accessToken       String?  @db.Text
  refreshToken      String?  @db.Text
  accessTokenExpiresAt   DateTime?
  refreshTokenExpiresAt  DateTime?
  scope             String?
  idToken           String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  password          String?

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  userId    String
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
}

model Project {
  id        String   @id @default(uuid())
  name      String
  userId    String   // Will be migrated to Better Auth User IDs
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
}

enum MessageRole {
  USER
  ASSISTANT
}

enum MessageType {
  RESULT
  ERROR
}

model Message {
  id        String   @id @default(uuid())
  content   String
  role      MessageRole
  type      MessageType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  fragment Fragment?
}

model Fragment {
  id        String   @id @default(uuid())
  messageId String   @unique
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  sandboxUrl String
  title      String
  files      Json
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Usage {
  
  key       String   @id
  points    Int
  expiresAt DateTime?
}