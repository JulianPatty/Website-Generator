// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Better Auth Models

model User {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  email         String   @unique
  emailVerified Boolean  @default(false)
  name          String?
  firstName     String?
  lastName      String?
  phone         String?
  image         String?
  twoFactorEnabled Boolean @default(false)

  accounts Account[]
  sessions Session[]
  twoFactors TwoFactor[]
  passkeys Passkey[]
  // projects      Project[] // Will be added after migration
  @@map("user")
}

model Account {
  id                    String    @id @default(uuid())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt



  accountId             String
  providerId            String
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?   @db.Text
  password              String?

  userId                String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  userId    String
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Verification {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  identifier String
  value      String
  expiresAt  DateTime

  @@unique([identifier, value])
  @@map("verification")
}

// Two-Factor Authentication Model
model TwoFactor {
  id          String @id @default(uuid())
  secret      String
  backupCodes String @db.Text
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}

// Passkey Model
model Passkey {
  id           String    @id @default(uuid())
  name         String?
  publicKey    String    @db.Text
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialID String    @unique
  counter      Int
  deviceType   String
  backedUp     Boolean
  transports   String?
  createdAt    DateTime  @default(now())
  aaguid       String?

  @@map("passkey")
}

model Project {
  id        String   @id @default(uuid())
  name      String
  userId    String // Will be migrated to Better Auth User IDs
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]
}

enum MessageRole {
  USER
  ASSISTANT
}

enum MessageType {
  RESULT
  ERROR
}

model Message {
  id        String      @id @default(uuid())
  content   String
  role      MessageRole
  type      MessageType
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  fragment Fragment?
}

model Fragment {
  id        String  @id @default(uuid())
  messageId String  @unique
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  sandboxUrl String
  title      String
  files      Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Usage {
  id        String    @id @default(uuid())
  key       String    @unique
  points    Int
  expiresAt DateTime?

  @@map("usage")
}
